// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JSR-172 Implementation wscompile 1.0, using: JAX-RPC Standard Implementation (1.1, build R59)

package mstag.services;



public class CategoryFaultReason {
    private java.lang.String value;
    public static final String _UnspecifiedString = "Unspecified";
    public static final String _DuplicateNameString = "DuplicateName";
    public static final String _NotFoundString = "NotFound";
    public static final String _InvalidStatusString = "InvalidStatus";
    public static final String _BlockedString = "Blocked";
    public static final String _CascadeDeleteString = "CascadeDelete";
    public static final String _DefaultCategoryDeleteString = "DefaultCategoryDelete";
    public static final String _RangeSearchNotSupportedString = "RangeSearchNotSupported";
    
    public static final java.lang.String _Unspecified = new java.lang.String(_UnspecifiedString);
    public static final java.lang.String _DuplicateName = new java.lang.String(_DuplicateNameString);
    public static final java.lang.String _NotFound = new java.lang.String(_NotFoundString);
    public static final java.lang.String _InvalidStatus = new java.lang.String(_InvalidStatusString);
    public static final java.lang.String _Blocked = new java.lang.String(_BlockedString);
    public static final java.lang.String _CascadeDelete = new java.lang.String(_CascadeDeleteString);
    public static final java.lang.String _DefaultCategoryDelete = new java.lang.String(_DefaultCategoryDeleteString);
    public static final java.lang.String _RangeSearchNotSupported = new java.lang.String(_RangeSearchNotSupportedString);
    
    public static final CategoryFaultReason Unspecified = new CategoryFaultReason(_Unspecified);
    public static final CategoryFaultReason DuplicateName = new CategoryFaultReason(_DuplicateName);
    public static final CategoryFaultReason NotFound = new CategoryFaultReason(_NotFound);
    public static final CategoryFaultReason InvalidStatus = new CategoryFaultReason(_InvalidStatus);
    public static final CategoryFaultReason Blocked = new CategoryFaultReason(_Blocked);
    public static final CategoryFaultReason CascadeDelete = new CategoryFaultReason(_CascadeDelete);
    public static final CategoryFaultReason DefaultCategoryDelete = new CategoryFaultReason(_DefaultCategoryDelete);
    public static final CategoryFaultReason RangeSearchNotSupported = new CategoryFaultReason(_RangeSearchNotSupported);
    
    protected CategoryFaultReason(java.lang.String value) {
        this.value = value;
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static CategoryFaultReason fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (Unspecified.value.equals(value)) {
            return Unspecified;
        } else if (DuplicateName.value.equals(value)) {
            return DuplicateName;
        } else if (NotFound.value.equals(value)) {
            return NotFound;
        } else if (InvalidStatus.value.equals(value)) {
            return InvalidStatus;
        } else if (Blocked.value.equals(value)) {
            return Blocked;
        } else if (CascadeDelete.value.equals(value)) {
            return CascadeDelete;
        } else if (DefaultCategoryDelete.value.equals(value)) {
            return DefaultCategoryDelete;
        } else if (RangeSearchNotSupported.value.equals(value)) {
            return RangeSearchNotSupported;
        }
        throw new IllegalArgumentException();
    }
    
    public static CategoryFaultReason fromString(String value)
        throws java.lang.IllegalStateException {
        if (value.equals(_UnspecifiedString)) {
            return Unspecified;
        } else if (value.equals(_DuplicateNameString)) {
            return DuplicateName;
        } else if (value.equals(_NotFoundString)) {
            return NotFound;
        } else if (value.equals(_InvalidStatusString)) {
            return InvalidStatus;
        } else if (value.equals(_BlockedString)) {
            return Blocked;
        } else if (value.equals(_CascadeDeleteString)) {
            return CascadeDelete;
        } else if (value.equals(_DefaultCategoryDeleteString)) {
            return DefaultCategoryDelete;
        } else if (value.equals(_RangeSearchNotSupportedString)) {
            return RangeSearchNotSupported;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve() {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof CategoryFaultReason)) {
            return false;
        }
        return ((CategoryFaultReason)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
