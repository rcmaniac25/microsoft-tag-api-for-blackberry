// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JSR-172 Implementation wscompile 1.0, using: JAX-RPC Standard Implementation (1.1, build R59)

package mstag.services;



public class TagFaultReason {
    private java.lang.String value;
    public static final String _UnspecifiedString = "Unspecified";
    public static final String _DuplicateNameString = "DuplicateName";
    public static final String _NotFoundString = "NotFound";
    public static final String _InvalidStatusString = "InvalidStatus";
    public static final String _PausedString = "Paused";
    public static final String _BlockedString = "Blocked";
    public static final String _FrozenString = "Frozen";
    public static final String _FourRowBarcodeLimitExceedString = "FourRowBarcodeLimitExceed";
    public static final String _InvalidTagTypeString = "InvalidTagType";
    public static final String _DatesConflictString = "DatesConflict";
    public static final String _PropertyUpdateNotAllowedString = "PropertyUpdateNotAllowed";
    public static final String _RangeSearchNotSupportedString = "RangeSearchNotSupported";
    
    public static final java.lang.String _Unspecified = new java.lang.String(_UnspecifiedString);
    public static final java.lang.String _DuplicateName = new java.lang.String(_DuplicateNameString);
    public static final java.lang.String _NotFound = new java.lang.String(_NotFoundString);
    public static final java.lang.String _InvalidStatus = new java.lang.String(_InvalidStatusString);
    public static final java.lang.String _Paused = new java.lang.String(_PausedString);
    public static final java.lang.String _Blocked = new java.lang.String(_BlockedString);
    public static final java.lang.String _Frozen = new java.lang.String(_FrozenString);
    public static final java.lang.String _FourRowBarcodeLimitExceed = new java.lang.String(_FourRowBarcodeLimitExceedString);
    public static final java.lang.String _InvalidTagType = new java.lang.String(_InvalidTagTypeString);
    public static final java.lang.String _DatesConflict = new java.lang.String(_DatesConflictString);
    public static final java.lang.String _PropertyUpdateNotAllowed = new java.lang.String(_PropertyUpdateNotAllowedString);
    public static final java.lang.String _RangeSearchNotSupported = new java.lang.String(_RangeSearchNotSupportedString);
    
    public static final TagFaultReason Unspecified = new TagFaultReason(_Unspecified);
    public static final TagFaultReason DuplicateName = new TagFaultReason(_DuplicateName);
    public static final TagFaultReason NotFound = new TagFaultReason(_NotFound);
    public static final TagFaultReason InvalidStatus = new TagFaultReason(_InvalidStatus);
    public static final TagFaultReason Paused = new TagFaultReason(_Paused);
    public static final TagFaultReason Blocked = new TagFaultReason(_Blocked);
    public static final TagFaultReason Frozen = new TagFaultReason(_Frozen);
    public static final TagFaultReason FourRowBarcodeLimitExceed = new TagFaultReason(_FourRowBarcodeLimitExceed);
    public static final TagFaultReason InvalidTagType = new TagFaultReason(_InvalidTagType);
    public static final TagFaultReason DatesConflict = new TagFaultReason(_DatesConflict);
    public static final TagFaultReason PropertyUpdateNotAllowed = new TagFaultReason(_PropertyUpdateNotAllowed);
    public static final TagFaultReason RangeSearchNotSupported = new TagFaultReason(_RangeSearchNotSupported);
    
    protected TagFaultReason(java.lang.String value) {
        this.value = value;
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static TagFaultReason fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (Unspecified.value.equals(value)) {
            return Unspecified;
        } else if (DuplicateName.value.equals(value)) {
            return DuplicateName;
        } else if (NotFound.value.equals(value)) {
            return NotFound;
        } else if (InvalidStatus.value.equals(value)) {
            return InvalidStatus;
        } else if (Paused.value.equals(value)) {
            return Paused;
        } else if (Blocked.value.equals(value)) {
            return Blocked;
        } else if (Frozen.value.equals(value)) {
            return Frozen;
        } else if (FourRowBarcodeLimitExceed.value.equals(value)) {
            return FourRowBarcodeLimitExceed;
        } else if (InvalidTagType.value.equals(value)) {
            return InvalidTagType;
        } else if (DatesConflict.value.equals(value)) {
            return DatesConflict;
        } else if (PropertyUpdateNotAllowed.value.equals(value)) {
            return PropertyUpdateNotAllowed;
        } else if (RangeSearchNotSupported.value.equals(value)) {
            return RangeSearchNotSupported;
        }
        throw new IllegalArgumentException();
    }
    
    public static TagFaultReason fromString(String value)
        throws java.lang.IllegalStateException {
        if (value.equals(_UnspecifiedString)) {
            return Unspecified;
        } else if (value.equals(_DuplicateNameString)) {
            return DuplicateName;
        } else if (value.equals(_NotFoundString)) {
            return NotFound;
        } else if (value.equals(_InvalidStatusString)) {
            return InvalidStatus;
        } else if (value.equals(_PausedString)) {
            return Paused;
        } else if (value.equals(_BlockedString)) {
            return Blocked;
        } else if (value.equals(_FrozenString)) {
            return Frozen;
        } else if (value.equals(_FourRowBarcodeLimitExceedString)) {
            return FourRowBarcodeLimitExceed;
        } else if (value.equals(_InvalidTagTypeString)) {
            return InvalidTagType;
        } else if (value.equals(_DatesConflictString)) {
            return DatesConflict;
        } else if (value.equals(_PropertyUpdateNotAllowedString)) {
            return PropertyUpdateNotAllowed;
        } else if (value.equals(_RangeSearchNotSupportedString)) {
            return RangeSearchNotSupported;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve() {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof TagFaultReason)) {
            return false;
        }
        return ((TagFaultReason)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
