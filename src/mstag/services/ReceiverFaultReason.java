// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JSR-172 Implementation wscompile 1.0, using: JAX-RPC Standard Implementation (1.1, build R59)

package mstag.services;



public class ReceiverFaultReason {
    private java.lang.String value;
    public static final String _UnspecifiedString = "Unspecified";
    public static final String _InternalErrorString = "InternalError";
    public static final String _RuleFailureString = "RuleFailure";
    
    public static final java.lang.String _Unspecified = new java.lang.String(_UnspecifiedString);
    public static final java.lang.String _InternalError = new java.lang.String(_InternalErrorString);
    public static final java.lang.String _RuleFailure = new java.lang.String(_RuleFailureString);
    
    public static final ReceiverFaultReason Unspecified = new ReceiverFaultReason(_Unspecified);
    public static final ReceiverFaultReason InternalError = new ReceiverFaultReason(_InternalError);
    public static final ReceiverFaultReason RuleFailure = new ReceiverFaultReason(_RuleFailure);
    
    protected ReceiverFaultReason(java.lang.String value) {
        this.value = value;
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static ReceiverFaultReason fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (Unspecified.value.equals(value)) {
            return Unspecified;
        } else if (InternalError.value.equals(value)) {
            return InternalError;
        } else if (RuleFailure.value.equals(value)) {
            return RuleFailure;
        }
        throw new IllegalArgumentException();
    }
    
    public static ReceiverFaultReason fromString(String value)
        throws java.lang.IllegalStateException {
        if (value.equals(_UnspecifiedString)) {
            return Unspecified;
        } else if (value.equals(_InternalErrorString)) {
            return InternalError;
        } else if (value.equals(_RuleFailureString)) {
            return RuleFailure;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve() {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof ReceiverFaultReason)) {
            return false;
        }
        return ((ReceiverFaultReason)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
