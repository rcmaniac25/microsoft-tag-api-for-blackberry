// This class was generated by the JAXRPC SI, do not edit.
// Contents subject to change without notice.
// JSR-172 Implementation wscompile 1.0, using: JAX-RPC Standard Implementation (1.1, build R59)

package mstag.services;



public class BarCodeFaultReason {
    private java.lang.String value;
    public static final String _UnspecifiedString = "Unspecified";
    public static final String _InsufficientFeaturePermissionString = "InsufficientFeaturePermission";
    public static final String _ImageGenerationFailString = "ImageGenerationFail";
    public static final String _OverflowString = "Overflow";
    public static final String _IncorrectFormatString = "IncorrectFormat";
    public static final String _BlackAndWhiteFourRowBarcodeNotAllowedString = "BlackAndWhiteFourRowBarcodeNotAllowed";
    
    public static final java.lang.String _Unspecified = new java.lang.String(_UnspecifiedString);
    public static final java.lang.String _InsufficientFeaturePermission = new java.lang.String(_InsufficientFeaturePermissionString);
    public static final java.lang.String _ImageGenerationFail = new java.lang.String(_ImageGenerationFailString);
    public static final java.lang.String _Overflow = new java.lang.String(_OverflowString);
    public static final java.lang.String _IncorrectFormat = new java.lang.String(_IncorrectFormatString);
    public static final java.lang.String _BlackAndWhiteFourRowBarcodeNotAllowed = new java.lang.String(_BlackAndWhiteFourRowBarcodeNotAllowedString);
    
    public static final BarCodeFaultReason Unspecified = new BarCodeFaultReason(_Unspecified);
    public static final BarCodeFaultReason InsufficientFeaturePermission = new BarCodeFaultReason(_InsufficientFeaturePermission);
    public static final BarCodeFaultReason ImageGenerationFail = new BarCodeFaultReason(_ImageGenerationFail);
    public static final BarCodeFaultReason Overflow = new BarCodeFaultReason(_Overflow);
    public static final BarCodeFaultReason IncorrectFormat = new BarCodeFaultReason(_IncorrectFormat);
    public static final BarCodeFaultReason BlackAndWhiteFourRowBarcodeNotAllowed = new BarCodeFaultReason(_BlackAndWhiteFourRowBarcodeNotAllowed);
    
    protected BarCodeFaultReason(java.lang.String value) {
        this.value = value;
    }
    
    public java.lang.String getValue() {
        return value;
    }
    
    public static BarCodeFaultReason fromValue(java.lang.String value)
        throws java.lang.IllegalStateException {
        if (Unspecified.value.equals(value)) {
            return Unspecified;
        } else if (InsufficientFeaturePermission.value.equals(value)) {
            return InsufficientFeaturePermission;
        } else if (ImageGenerationFail.value.equals(value)) {
            return ImageGenerationFail;
        } else if (Overflow.value.equals(value)) {
            return Overflow;
        } else if (IncorrectFormat.value.equals(value)) {
            return IncorrectFormat;
        } else if (BlackAndWhiteFourRowBarcodeNotAllowed.value.equals(value)) {
            return BlackAndWhiteFourRowBarcodeNotAllowed;
        }
        throw new IllegalArgumentException();
    }
    
    public static BarCodeFaultReason fromString(String value)
        throws java.lang.IllegalStateException {
        if (value.equals(_UnspecifiedString)) {
            return Unspecified;
        } else if (value.equals(_InsufficientFeaturePermissionString)) {
            return InsufficientFeaturePermission;
        } else if (value.equals(_ImageGenerationFailString)) {
            return ImageGenerationFail;
        } else if (value.equals(_OverflowString)) {
            return Overflow;
        } else if (value.equals(_IncorrectFormatString)) {
            return IncorrectFormat;
        } else if (value.equals(_BlackAndWhiteFourRowBarcodeNotAllowedString)) {
            return BlackAndWhiteFourRowBarcodeNotAllowed;
        }
        throw new IllegalArgumentException();
    }
    
    public String toString() {
        return value.toString();
    }
    
    private Object readResolve() {
        return fromValue(getValue());
    }
    
    public boolean equals(Object obj) {
        if (!(obj instanceof BarCodeFaultReason)) {
            return false;
        }
        return ((BarCodeFaultReason)obj).value.equals(value);
    }
    
    public int hashCode() {
        return value.hashCode();
    }
}
